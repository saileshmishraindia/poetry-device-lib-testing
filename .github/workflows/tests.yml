name: Python package tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15   # prevent random cancellation

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry
        run: poetry config virtualenvs.create true

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install project and dependencies
        run: poetry install --no-interaction --with dev

      - name: Verify package installation
        run: poetry run python -c "import poetry_adv_fun_test; print('Version:', poetry_adv_fun_test.__version__)"

      - name: Run tests with coverage
        run: poetry run pytest --cov=poetry_adv_fun_test --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }} # required if private repo

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    timeout-minutes: 10   # add safety timeout

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Publish to PyPI
        run: poetry publish --build --username __token__ --password ${{ secrets.PYPI_TOKEN }}

